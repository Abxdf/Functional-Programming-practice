#lang racket

(define (make-point x y)
  (cons x y))
(define (x-point z)
  (car z))
(define (y-point z)
  (cdr z))
(define (make-segment start-segment end-segment)
  (cons start-segment end-segment))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))

(define (make-rect seg1 seg2 seg3 seg4)
  (cons seg1 (cons seg2 (cons seg3 seg4))))
(define (first-segment rect)
  (car rect))
(define (second-segment rect)
  (cadr rect))
(define (third-segment rect)
  (caddr rect))
(define (fourth-segment rect)
  (cdddr rect))
  

(define (distance segment)
  (let ((a (- (x-point (start-segment segment)) (x-point (end-segment segment))))
        (b (- (y-point (start-segment segment)) (y-point (end-segment segment)))))
        (sqrt (+ (* a a ) (* b b)))))

(define (area rect)
  (let ((d1 (distance (first-segment rect)))
        (d2 (distance (second-segment rect)))
        (d3 (distance (third-segment rect)))
        (d4 (distance (fourth-segment rect))))
    (cond ((= d1 d2) (* d1 d3))
          ((= d1 d3) (* d1 d4))
          ((= d1 d4) (* d1 d2)))))

(define (perimeter rect)
  (let ((d1 (distance (first-segment rect)))
        (d2 (distance (second-segment rect)))
        (d3 (distance (third-segment rect)))
        (d4 (distance (fourth-segment rect))))
    (cond ((= d1 d2) (* 2 (+ d1 d3)))
          ((= d1 d3) (* 2 (+ d1 d4)))
          ((= d1 d4) (* 2 (+ d1 d2))))))

(define p1 (make-point 0 0))
(define p2 (make-point 0 1))
(define p3 (make-point 2 1))
(define p4 (make-point 2 0))

(define l1 (make-segment p1 p2))
(define l2 (make-segment p2 p3))
(define l3 (make-segment p3 p4))
(define l4 (make-segment p4 p1))

(define R(make-rect l1 l2 l3 l4))
(area R)
(perimeter R)