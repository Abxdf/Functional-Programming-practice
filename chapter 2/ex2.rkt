#lang racket

(define (make-point x y)
  (cons x y))
(define (x-point z)
  (car z))
(define (y-point z)
  (cdr z))
(define (make-segment start-segment end-segment)
  (cons start-segment end-segment))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (print-point p)
(newline)
(display "(")
(display (x-point p))
(display ",")
(display (y-point p))
(display ")"))
(define (mid-point segment)
  (make-point (/ (+(x-point(start-segment segment))  (x-point(end-segment segment)))2) 
              (/ (+(y-point(start-segment segment))  (y-point(end-segment segment))) 2)))
(define line (make-segment (make-point 1 2) (make-point 3 4)))


(define mid (mid-point line))
(print-point mid)